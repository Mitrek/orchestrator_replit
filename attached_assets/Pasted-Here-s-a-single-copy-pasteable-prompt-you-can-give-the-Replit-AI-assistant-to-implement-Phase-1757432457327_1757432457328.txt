Here’s a **single, copy-pasteable prompt** you can give the Replit AI assistant to implement **Phase 9 – Dev UI (base64-only)** on top of your **Phase 8 server**.

---

# ✅ Implement Phase 9 — Dev UI (Base64-only) on top of Phase 8

**Context:** The server is rolled back to the end of Phase 8. Keep all Phase-8 APIs, observability, and error semantics. We’ve had issues with multi-process dev setups and URL/png mode; we now want a **single Express process** serving both API and built client, and **base64-only** heatmaps.

**Absolute rules**

* Do **not** reintroduce any file URL / `.png` outputs. The API must return **base64 data URIs only**.
* Do **not** add new dependencies. Use existing React, Vite, Tailwind, Router, Express.
* Do **not** weaken Phase-8 validations or diagnostics.
* Do **not** print full base64 strings to logs (only length + short prefix).

---

## 0) Outcomes / Definition of Done

* One public process (Express) listens on `process.env.PORT` at `0.0.0.0`.
* Routes live and unchanged:
  `GET /health` → 200 `"ok"`
  `POST /api/v1/heatmap` → `{ base64, meta }` (engine="ai")
  `POST /api/v1/heatmap/data` → `{ base64, meta }` (engine="data")
  `GET /api/v1/heatmap/diagnostics` → Phase-8 shape
* **Dev UI** available at `/dev/heatmap` only when `VITE_FEATURE_HEATMAP_DEV_UI=true`.
* Dev UI has **three panels** (AI Heatmap, Data Heatmap, Diagnostics) and a shared **Console**:

  * Renders returned **base64** as `<img>`.
  * Shows meta + reqId (if present), status, client latency.
  * Copy-base64 / Download-PNG actions.
  * Request log (last 5).
  * Client-side validation (http/https for URL, JSON array for dataPoints).
* Missing URL → **400** (server). Malformed (no scheme) → **400** (server). Client blocks obvious bad inputs too.
* Page HTML contains **plain marker texts** (for smoke tests):
  `AI Heatmap — /api/v1/heatmap`
  `Data Heatmap — /api/v1/heatmap/data`

---

## 1) Server: single process + health + serve client build

**Files:** under `server/` (TypeScript or JS as in repo).

1. Ensure Express binds correctly in the entry file (e.g., `server/index.ts` or `server/index.js`):

   * `const port = parseInt(process.env.PORT || "5000", 10);`
   * `app.listen(port, "0.0.0.0", ...)`
2. **Add/wire** `GET /health` returning 200 `"ok"`. If `server/health.*` exists, register it as `/health`. Otherwise a one-liner handler is fine.
3. Confirm API routes are present and **base64-only**:

   * `POST /api/v1/heatmap` returns `{ base64, meta }` (no `url` field, no `returnMode`).
   * `POST /api/v1/heatmap/data` returns `{ base64, meta }`.
   * Keep diagnostics route as in Phase 8.
4. Serve the **built client** from Express:

   * Static root: `client/dist`
   * Route `/dev/heatmap` (and root `/` if appropriate) to `index.html` in `client/dist`
   * Specific API routes must be registered **before** any catch-all.

**Acceptance checks (manual):**

* Visit `$BASE/health` → `ok`.
* `curl` both POST routes → JSON with `base64` starting `data:image/png;base64,`.

---

## 2) Root scripts + Replit Run

**Root `package.json`** (add if missing/adjust if present):

```json
{
  "scripts": {
    "build:client": "npm --prefix client run build",
    "start:server": "npm --prefix server run start",
    "serve": "npm run build:client && npm run start:server"
  }
}
```

**Replit “Run”** command: `npm run serve`
This must build the client and start **Express** as the single public web process.

---

## 3) Feature flag

**Create/ensure:** `client/src/config/featureFlags.ts`

* Export `FEATURE_HEATMAP_DEV_UI` from `import.meta.env.VITE_FEATURE_HEATMAP_DEV_UI === "true"`.

**Set Replit Secret (dev only):** `VITE_FEATURE_HEATMAP_DEV_UI=true`.

---

## 4) Client routing (guarded)

In the app router (e.g., `client/src/App.tsx`):

* Conditionally add route: path **`/dev/heatmap`** → element `<DevHeatmap />` **only if** `FEATURE_HEATMAP_DEV_UI` is true.
* Optional: show a small “Dev” link in footer when the flag is on.

---

## 5) HTTP helper

**Create:** `client/src/utils/http.ts`

* Export `requestJson<T>({ url, method = "GET", body, signal })` → Promise that resolves to `{ status, durationMs, data }`.
* Measure client latency; never throw for HTTP errors (only throw for network/abort).

---

## 6) Dev UI page (base64-only)

**Create:** `client/src/pages/DevHeatmap.tsx`

**Layout:** two columns (Tailwind)

* Container: `max-w-[1200px] mx-auto p-6 grid grid-cols-1 lg:grid-cols-2 gap-6`
* Use simple Card styles: `rounded-xl border p-4`

### Left column — 3 panels

**A) AI Heatmap panel**

* Inputs: `url` (default `https://www.acquisition.com/`), `device` select (`desktop` default, `tablet`, `mobile`), `persist` checkbox.
* Button: **Generate AI Heatmap**.
* On submit:

  * Validate URL starts with `http://` or `https://`.
  * Abort previous in-flight AI request.
  * POST `/api/v1/heatmap` with `{ url, device }`.
  * If persist checked, save `{ url, device }` in `localStorage: heatmap_dev_ai_form`.

**B) Data Heatmap panel**

* Inputs: `url`, `device`, `dataPoints` (multiline JSON), `persist`.
* Prefill `dataPoints` with this valid sample:

  ```json
  [
    { "x": 0.32, "y": 0.18, "type": "click" },
    { "x": 0.50, "y": 0.42, "type": "move"  },
    { "x": 0.68, "y": 0.27, "type": "move"  },
    { "x": 0.51, "y": 0.66, "type": "click" },
    { "x": 0.40, "y": 0.82, "type": "move"  }
  ]
  ```
* On submit:

  * Validate URL and that `dataPoints` parses to an array of objects with 0–1 floats.
  * Abort previous Data request.
  * POST `/api/v1/heatmap/data` with `{ url, device, dataPoints }`.
  * Persist to `localStorage: heatmap_dev_data_form` if checked.

**C) Diagnostics panel**

* Buttons:

  * **GET /health**
  * **GET /api/v1/heatmap/diagnostics**
* Show their JSON in the Console.

**Markers (must render in page HTML):**

* Include visible text nodes (not JS-hydrated only):
  `AI Heatmap — /api/v1/heatmap`
  `Data Heatmap — /api/v1/heatmap/data`

### Right column — Console (shared)

* **Image Preview**: render `<img src={base64}>` when present; constrain height and allow scroll.
* **Meta summary**: show `reqId` (if present), `meta.phase`, `meta.engine`, `meta.viewport.width/height`, `status`, client `durationMs`.
* **Actions**:

  * **Copy base64** (full data URI to clipboard).
  * **Download PNG** (convert base64 → Blob; filename `heatmap-<timestamp>.png`).
* **Raw JSON**: pretty print; **truncate** base64 (show length + first \~64 chars).
* **Request Log (last 5)**: timestamp, route, status, duration, expandable request/response (with truncated base64). Newest first.
* Each panel owns an `AbortController`; reruns cancel the current request.

---

## 7) Validation & errors

* Client blocks:

  * URL that doesn’t start with `http://` or `https://`.
  * `dataPoints` that fails to parse / isn’t an array of normalized points.
* Server must continue to:

  * 400 on missing URL.
  * 400 on malformed URL (no scheme).
  * 500 with taxonomy on provider/render failures.
* UI shows inline errors and preserves form state.

---

## 8) Quick verification (before smoke test)

* `$BASE/health` → 200 `ok`.
* `$BASE/dev/heatmap` → loads and contains the two marker strings in page HTML.
* `curl` POSTs return base64 envelopes (prefix `data:image/png;base64,`).

---

## 9) Ready for the Phase-9 smoketest (base64-only)

Expected to pass:

* SPA shell + markers at `/dev/heatmap`.
* Base64 envelopes for both AI and Data routes.
* 400 for missing URL.
* Diagnostics reachable.

---

## Pitfalls to avoid (please double-check)

* No `.png` URLs or static heatmap mounts. Dev UI **never** expects file URLs.
* Don’t depend on Vite dev scripts for detection; our markers are plain HTML text.
* Only one public process (Express). The Replit “Run” must build client then start server.
* Don’t log full base64 strings; log length & short prefix only.

---

**When finished**, reply with:

* Files created/edited with paths.
* A 1–2 line confirmation of the Run command used.
* A short “How to verify” checklist (the three curl commands + two URLs).
