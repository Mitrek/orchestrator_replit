Perfect—here’s a tight, copy-pasteable plan your Replit assistant can follow to get the app serving on the public port, expose `/health`, and make `/dev/heatmap` load via Express (single process). This assumes your repo has `server/` (Express) and `client/` (Vite React).

---

# ✅ Goal

* One public web process (Express) listening on `process.env.PORT` & `0.0.0.0`
* Routes live:
  `GET /health`, `POST /api/v1/heatmap`, `POST /api/v1/heatmap/data`, `GET /api/v1/heatmap/diagnostics`
* Dev UI (built) served by Express: `/dev/heatmap` (feature-flagged in client)
* Base64-only heatmaps (already planned)

---

## 1) Ensure Express binds correctly + add `/health`

**Edit:** `server/index.(js|ts)` (whichever you use as entry)

* Bind to `process.env.PORT` and `0.0.0.0`
* Add a simple health route
* (Optional) keep CORS/body limits if you already have them

```js
// server/index.js
import express from "express";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(express.json({ limit: "20mb" }));

// --- Health probe (for smoketest) ---
app.get("/health", (_req, res) => res.status(200).send("ok"));

// --- Your existing API routes should already be defined here ---
// app.post("/api/v1/heatmap", ...);
// app.post("/api/v1/heatmap/data", ...);
// app.get("/api/v1/heatmap/diagnostics", ...);

// --- Serve built client (added in step 2) ---
const clientDist = path.join(__dirname, "../client/dist");
app.use(express.static(clientDist));

// Route SPA paths (Dev UI)
app.get("/dev/heatmap", (_req, res) => {
  res.sendFile(path.join(clientDist, "index.html"));
});

// Optional catch-all (only if this won’t collide with your product app)
app.get("/", (_req, res) => {
  res.sendFile(path.join(clientDist, "index.html"));
});

const port = process.env.PORT || 3000;
app.listen(port, "0.0.0.0", () => {
  console.log(`HTTP server listening on http://0.0.0.0:${port}`);
});
```

**Acceptance**

* File compiles
* Logs show “HTTP server listening …” on start

---

## 2) Build the client & enable the Dev UI flag

**Client env flag** (already in your plan):
`client/src/config/featureFlags.ts`

```ts
export const FEATURE_HEATMAP_DEV_UI =
  (import.meta as any).env?.VITE_FEATURE_HEATMAP_DEV_UI === "true";
```

**Replit Secrets (Environment)**
Add: `VITE_FEATURE_HEATMAP_DEV_UI=true`

**Client scripts** (`client/package.json`)—ensure:

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
```

**Server scripts** (`server/package.json`)—ensure:

```json
{
  "scripts": {
    "start": "node index.js"
  }
}
```

**Root scripts** (if you have a root `package.json`):

```json
{
  "scripts": {
    "build:client": "npm --prefix client run build",
    "start:server": "npm --prefix server run start",
    "serve": "npm run build:client && npm run start:server"
  }
}
```

---

## 3) Set Replit “Run” command to a single process

In Replit → **Shell (or .replit/Nix)**, make the **Run** command:

* If you have a root `package.json` with scripts above:

  ```
  npm run serve
  ```
* If you don’t use a root package.json, run explicitly:

  ```
  npm --prefix client run build && npm --prefix server run start
  ```

**Why**: Replit exposes only one public port; Express must be that process.

---

## 4) Keep base64-only behavior (no URL mode in client)

* The client should **always** display `response.base64`
* Do **not** send `returnMode`; body for AI:

  ```json
  { "url": "https://example.com", "device": "desktop" }
  ```
* Body for Data:

  ```json
  { "url": "...", "device": "desktop", "dataPoints": [ { "x": 0.3, "y": 0.2 }, ... ] }
  ```

**Console actions** (client Dev UI):

* Copy base64
* Download PNG (client-side Blob)

---

## 5) Quick self-test (run these before the smoketest)

In your browser at your `$BASE`:

* `GET /health` → **ok**
* `GET /dev/heatmap` → HTML loads (SPA shell; in built mode you won’t see `/@vite/client`, that’s fine)

From Replit Shell (or local terminal, replace `$BASE`):

```bash
curl -i "$BASE/health"

curl -s -X POST "$BASE/api/v1/heatmap" \
  -H "Content-Type: application/json" \
  -d '{"url":"https://www.acquisition.com/","device":"desktop"}' | head

curl -s -X POST "$BASE/api/v1/heatmap/data" \
  -H "Content-Type: application/json" \
  -d '{"url":"https://www.acquisition.com/","device":"desktop","dataPoints":[{"x":0.32,"y":0.18}]}' | head
```

**Acceptance**

* `/health` returns 200 + `ok`
* Both POSTs return JSON with `base64` starting `data:image/png;base64,`

---

## 6) Run your PowerShell smoketest (Phase 9, base64-only)

* Set `$BASE` in the script to your Replit URL
* Expect all tests to pass once the server is up and client is built

---

## 7) Done criteria (what I’ll look for)

* Replit “Run” starts **one** Express server on the public port
* `/health` returns 200
* `/dev/heatmap` loads (feature flag true)
* `POST /api/v1/heatmap` and `/api/v1/heatmap/data` return base64 images
* Diagnostics reachable at `/api/v1/heatmap/diagnostics` (if implemented per Phase 8)

---

### Notes for the assistant (important)

* Don’t add new dependencies.
* Don’t change API shapes.
* Keep logging clean—never print full base64; just length/prefix.
* If a wildcard route (`app.get('*', ...)`) collides with other server routes, keep specific API routes registered **before** the wildcard.

If you want, I can also give you a tiny “Run button” config snippet for `.replit` or `replit.nix`, but the command above is usually enough.
