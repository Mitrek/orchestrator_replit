Perfect. We’ll split Phase 9 into two crisp sub-steps. Here’s **Step 9.1**—ultra-precise so your Replit assistant can’t miss.

---

# Phase 9.1 — Scaffold Dev UI + Single Panel (AI Heatmap) + Console

**Scope of this step only**

* Add a feature-flagged Dev route: `/dev/heatmap`
* Build **one** panel: **AI Heatmap** (calls `POST /api/v1/heatmap`)
* Add a right-side **Console** (image preview + response envelope + mini request log)
* Implement **request timing**, **abort on re-run**, and **optional persistence** for this one panel
* No diagnostics panel, no data-heatmap panel yet (that’s Step 9.2)

---

## 0) Rules of engagement (don’t deviate)

* **No new dependencies.** Use existing React + Tailwind.
* **Do not** modify server behavior or routes.
* **Do not** touch product UI; isolate all changes under a dev flag.
* **All network calls** must capture: request URL/method/body, status, duration, response JSON.
* Names/paths/keys **must** match below exactly.

---

## 1) Feature flag

**File:** `client/src/config/featureFlags.ts`

* Export a single constant used by the router:

```
export const FEATURE_HEATMAP_DEV_UI =
  (import.meta as any).env?.VITE_FEATURE_HEATMAP_DEV_UI === "true";
```

**Replit env (dev only):** `VITE_FEATURE_HEATMAP_DEV_UI=true`

**Acceptance:**

* When the env var is **true**, `/dev/heatmap` is routable.
* When **false**, the route doesn’t exist and is not linkable.

---

## 2) Routing (guarded)

**File to touch:** your main router (e.g., `client/src/App.tsx` or wherever `Routes` live)

* Import the flag and conditionally mount the route:

  * Path: `/dev/heatmap`
  * Element: `<DevHeatmap />`
* Optional: add a tiny **“Dev”** footer link **only if** the flag is `true`.

**Acceptance:**

* Visiting `/dev/heatmap` succeeds only when flag is on; otherwise 404.
* No other routes changed.

---

## 3) Networking utility (shared for all panels)

**File:** `client/src/utils/http.ts` (new)

**Export:**

* `requestJson<T>(opts: { url: string; method?: "GET"|"POST"; body?: any; signal?: AbortSignal }): Promise<{ status: number; durationMs: number; data: T }>`

  * Start a timer before `fetch`
  * Set `Content-Type: application/json` if `body` present
  * Serialize body with `JSON.stringify`
  * On success, return `{ status, durationMs, data }`
  * On non-2xx, still parse JSON if possible and return that as `data`; **do not throw**
  * On network error/abort, **throw** `{ status: 0, durationMs, error: "NETWORK_ERROR" | "ABORTED" }`

**Acceptance:**

* `durationMs` is a positive integer.
* Aborted calls throw with `error: "ABORTED"`.

---

## 4) Dev page scaffold

**File:** `client/src/pages/DevHeatmap.tsx` (new)

**Layout (2 columns)**

* **Left**: “AI Heatmap” panel (single panel in this step)
* **Right**: “Console” (image + meta + last 5 requests)

### 4.1 Left panel: **AI Heatmap**

**Panel title:** `AI Heatmap — /api/v1/heatmap`

**Fields (with exact names + defaults):**

* `url` (text input) — default: `https://www.acquisition.com/`
* `device` (select) — default: `desktop`; options: `desktop`, `tablet`, `mobile`
* `returnMode` (select) — default: `base64`; options: `base64`, `url`
* `persist` (checkbox) — default: **unchecked**

**Buttons:**

* **Generate AI Heatmap** (primary)
* **Reset** (ghost)

**Behavioral rules:**

* `Generate`:

  * Creates a fresh **AbortController**; abort any previous **AI** request if still running
  * Disables itself while pending (re-click cancels previous then starts new)
  * Sends `POST /api/v1/heatmap` with body:

    ```
    {
      "url": <string>,
      "device": "desktop" | "tablet" | "mobile",
      "returnMode": "base64" | "url"
    }
    ```
  * Uses `requestJson` to get `{ status, durationMs, data }`
  * If `status >= 400`, show error banner in the Console, do **not** try to render image
  * If `data.base64` exists and isn’t prefixed, prepend `data:image/png;base64,`
  * If `data.url` exists, show image from that URL and render a clickable link
  * Store a log entry in request log (see Console spec below)
* `Reset`:

  * Clears all AI panel inputs to defaults
  * If request is in-flight, abort it
  * Clears any validation errors for this panel only

**Persistence (per panel):**

* Key: `heatmap_dev_ai_form`
* Only when `persist` is checked:

  * On any input change, store `{ url, device, returnMode }`
  * On page mount: if `persist` is checked and a value exists, preload it
* If `persist` becomes unchecked, it **does not** clear storage instantly; it just stops updating it

**Disabled state while pending:**

* The **Generate** button disabled
* Inputs remain editable (but clicking generate again must cancel prior first)

**Acceptance for panel:**

* A valid run shows success (image + envelope) in the Console
* An invalid URL or server 400 shows an error banner and logs the response
* Toggling `returnMode` shows the correct rendering path (base64 vs. URL)
* Re-clicking **Generate** while a request is running cancels the prior request (no stale overwrite)

### 4.2 Right column: **Console**

**Sections (top to bottom):**

1. **Image Preview**

   * If `base64` → `<img src={base64}>`
   * If `url` → `<img src={url}>` and a clickable `<a href={url} target="_blank">Open</a>`
   * If both present, prefer `base64` for preview (but still show the link)
   * Constrain max height (e.g., via container class), scroll if needed

2. **Meta Summary**

   * Prominently show:

     * `reqId` (bold, top line)
     * `meta.phase`
     * `meta.engine`
     * `meta.viewport` (width × height)
     * `durationMs` (from client timing)
     * HTTP `status`
   * If fields are missing, show `—`

3. **Raw Response JSON**

   * Pretty-printed full response envelope in `<pre>` with horizontal scroll

4. **Requests (last 5)**

   * For each entry, show:

     * `timestamp` (ISO seconds)
     * `endpoint` literal: `/api/v1/heatmap`
     * `status`
     * `durationMs`
     * Toggle to expand a mini block with:

       * `requestBody` (pretty JSON)
       * `responseSnippet` (first \~200 chars of JSON stringified)
   * Newest on top
   * Keep to last 5 (drop older)

**Acceptance for Console:**

* After a successful call, all four sections display expected content
* Errors populate sections 2–4 (no Image Preview attempted)
* Exactly the last 5 calls are retained

---

## 5) Validation rules (client-side for this step)

* `url` must start with `http://` or `https://` → else block request and show inline error under URL input
* `device` must be one of the provided options (force via select)
* `returnMode` must be one of the provided options (force via select)

**Acceptance:**

* Bad URL blocks the call and shows a red inline message
* Fixing the URL removes the message on next change

---

## 6) Visual guidelines (Tailwind)

* Two-column responsive grid (`lg:grid-cols-2`, top padding `pt-6`, gap `gap-6`)
* Each panel is a card: rounded, border, `p-4`, header text `font-semibold`
* Buttons row aligned right; primary before secondary
* Console uses monospaced font for JSON blocks: `font-mono text-sm`
* Image container with fixed max height and `overflow-auto`

**Acceptance:**

* Clean, minimal, readable; no overlapping elements; scroll where necessary

---

## 7) Step-specific test plan (manual)

1. **Flag**

   * With `VITE_FEATURE_HEATMAP_DEV_UI=true`, `/dev/heatmap` loads
   * With it off, URL 404s

2. **Happy path**

   * Defaults → click **Generate AI Heatmap**
   * Expect `200` and image; Console shows `reqId`, phase, engine, viewport, status, duration

3. **Return mode**

   * Switch to `returnMode=url`, run again
   * Expect image loads from `/heatmaps/...` and “Open” link works

4. **Abort behavior**

   * Click **Generate**, immediately click **Generate** again
   * First request is cancelled; second response sets the UI (no flicker/stale data)

5. **Bad input**

   * Enter `www.example.com` (missing scheme), click Generate
   * Client blocks with inline error; no request fired

6. **Persistence**

   * Check **Persist**, change `url`, refresh page
   * If Persist was checked at refresh, values reload; uncheck Persist, change values, refresh → defaults

7. **Reset**

   * Change all fields, press **Reset**
   * Values revert to defaults; any error message disappears

---

## 8) Deliverables checklist (what I expect in PR)

* `client/src/config/featureFlags.ts` created with the exact export
* Router updated to guard and expose `/dev/heatmap` only under the flag
* `client/src/utils/http.ts` implemented with timing + abort
* `client/src/pages/DevHeatmap.tsx` created with:

  * AI Heatmap panel (fields, buttons, validation, persist)
  * Console (image, meta summary, raw JSON, last 5 requests)
* No changes to server code or other client pages
* No new dependencies

---

When this is merged and stable, we’ll do **Phase 9.2**: add the **Data Heatmap** panel, **Diagnostics** panel, unify request log across panels, and wire the `?qa=1` button—all building on the same patterns you just implemented.
