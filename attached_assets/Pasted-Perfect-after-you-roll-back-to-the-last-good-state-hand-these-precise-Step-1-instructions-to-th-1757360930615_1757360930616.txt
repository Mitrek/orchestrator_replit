Perfect—after you roll back to the last good state, hand these **precise Step-1 instructions** to the Replit assistant. They’re short, surgical, and include exact files/exports, behaviors, and pass/fail checks.

---

# Step 1 — Hotspots JSON API (parity-safe, legacy-aware, no rendering)

**Goal:** Add a debug endpoint that returns **hotspots JSON only** (no images), supporting **phase7 AI** and **legacy** engines, with strict validation + parity rules.

**Do not touch:** existing `/api/v1/heatmap` and `/api/v1/heatmap/data`.

## 0) Assumptions (you already did)

* Legacy files exist and must not be edited:

  * `attached_assets/ai-engines/legacy/heatmap_v1.js`
  * `attached_assets/ai-engines/legacy/heatmap_v1.sha256` (SHA-256 = `8e4821f65d8e7c3f1e0e02fcb17fc2bd5ac4e35ae50f77689bdfff7f31ad6dd0`)

---

## 1) Create `server/services/validation.ts`

**Exports (names matter):**

* `export const ALLOWED_DEVICES = ["desktop","tablet","mobile"] as const`
* `export const DEVICE_MAP = { desktop:{width:1920,height:1080}, tablet:{width:1024,height:768}, mobile:{width:414,height:896} }`
* `export type Hotspot = { x:number; y:number; width:number; height:number; confidence:number; element_type:"headline"|"cta"|"logo"|"hero"|"product"|"price"|"other"; reason:string }`

**Helpers (implement exactly):**

* `clampAndValidateHotspots(list: Hotspot[]): { kept: Hotspot[]; dropped: number }`

  * Clamp all numbers to \[0,1]
  * Drop items with width/height ≤ 0 or NaN
* `iou(a: Hotspot, b: Hotspot): number`
* `greedyDeoverlap(list: Hotspot[], opts: { max: number; iouThreshold: number }): Hotspot[]`

  * Sort by `confidence` desc
  * Keep if IoU < 0.4
  * Stop at `max` (we’ll pass 8)

---

## 2) Create `server/services/aiHotspots.ts`  (phase7 engine)

**Export:**

* `getAiHotspotsPhase7({ url, device, parity }: { url:string; device:"desktop"|"tablet"|"mobile"; parity:boolean }): Promise<{ hotspots: Hotspot[]; meta: { engine:"phase7"; model:"gpt-4o-mini"; fallback:boolean; requested:number; accepted:number; pruned:number; promptHash:string } }>`

**Behavior:**

* If `process.env.OPENAI_API_KEY` missing → return **fallback hotspots** (see §5), `fallback:true`.
* Else call **Chat Completions**:

  * `model:"gpt-4o-mini"`, `temperature:0.3`, `max_tokens:1000`, `response_format:{ type:"json_object" }`
  * Prompt: require **exact JSON** in the form:

    ```json
    {"hotspots":[{"x":0.42,"y":0.18,"width":0.32,"height":0.10,"confidence":0.78,"element_type":"cta","reason":"..."}]}
    ```
* Parse JSON → `clampAndValidateHotspots` → `greedyDeoverlap(list,{max:8,iouThreshold:0.4})`.
* If `parity===true`: also drop `confidence < 0.25`.
* If empty after sanitize → fallback.
* Return hotspots + meta (include a `promptHash` of the prompt string).

---

## 3) Create `server/services/aiHotspots.legacy.ts`  (legacy adapter)

**Export:**

* `getAiHotspotsLegacy({ url, device, parity }: { url:string; device:"desktop"|"tablet"|"mobile"; parity:boolean }): Promise<{ hotspots: Hotspot[]; meta: { engine:"legacy"; checksumOk:boolean; requested:number; accepted:number; pruned:number } }>`

**Behavior:**

* Read `attached_assets/ai-engines/legacy/heatmap_v1.js` → compute SHA-256; compare with the contents of `attached_assets/ai-engines/legacy/heatmap_v1.sha256`.

  * If mismatch → **throw** with message: `"Legacy engine checksum mismatch (refuse to run)"`
* **Spawn** a Node process to run the legacy script (`--url`, `--device`, `--json` if supported) and capture **stdout JSON** hotspots. If the script can’t emit JSON yet, return **fallback** (still set `checksumOk:true`).
* Sanitize via `clampAndValidateHotspots` → `greedyDeoverlap({max:8,iouThreshold:0.4})`.
* If `parity===true`: drop `confidence < 0.25`.
* Return hotspots + meta.

---

## 4) Update router: add **one** new route

Modify your main router (e.g., `server/app-routes.ts` or `server/routes.ts`). **Add this route only**:

**`POST /api/v1/heatmap/hotspots`**

* Input JSON: `{ url: string; device?: "desktop"|"tablet"|"mobile"; engine?: "legacy"|"phase7"; parity?: boolean }`

  * Defaults: `device="desktop"`, `engine=process.env.AI_ENGINE || "phase7"`, `parity=true`
* Flow:

  1. Validate: if missing `url` → **400** `{ error: "URL is required" }`; if invalid `device` → **400** `{ error: "Invalid device", allowed: ALLOWED_DEVICES }`
  2. `engine==="legacy"` → call `getAiHotspotsLegacy`; else → `getAiHotspotsPhase7`
  3. **Re-sanitize again** (belt & suspenders) with same helpers and caps
  4. Respond **200** with:

     ```
     {
       "hotspots": [...],
       "meta": {
         "phase": "phase7",
         "engine": "ai",
         "device": "...",
         "viewport": { "width": ..., "height": ... },  // from DEVICE_MAP[device]
         "ai": {
           "engine": "legacy" | "phase7",
           "model": "legacy" | "gpt-4o-mini",
           "fallback": boolean,
           "promptHash": "<if phase7>",
           "checksumOk": <if legacy>,
           "requested": N, "accepted": K, "pruned": P,
           "parity": true | false
         },
         "timestamp": ISO-8601,
         "durationMs": number
       }
     }
     ```
* Log one structured line: `{ route:"/api/v1/heatmap/hotspots", url, device, engine, parity, durationMs, accepted, pruned, fallback }`

---

## 5) Fallback hotspot spec (used by both engines)

* Return **3–5** normalized boxes:

  * one \~top-center (hero), one \~top-right (CTA), one \~fold (y≈0.75–0.85)
  * width/height ≈ 0.15–0.35, `confidence` 0.55–0.70
* Then run the same sanitize + de-overlap + caps (≤8, IoU<0.4, drop <0.25 if parity).

---

## 6) Acceptance checks (must pass with your existing PowerShell smoke test)

* **TEST 1 (phase7)**: 200, `1..8` hotspots, all numbers ∈ \[0,1], `meta.phase==="phase7"`, `meta.ai.engine==="phase7"`, `meta.ai.parity===true`
* **TEST 2 (legacy)**: 200, `meta.ai.engine==="legacy"`, `meta.ai.checksumOk===true`
* **TEST 3 (invalid device)**: 400 with allowed list
* **TEST 4 (missing url)**: 400
* **TEST 5 (device variants)**: 200 for desktop/tablet/mobile

---

## 7) Guardrails

* **No screenshot calls**, no rendering, no UI changes in this step.
* Keep error messages **short and explicit**.
* Don’t reference `deviceSchema.options` in errors—use `ALLOWED_DEVICES`.

---

## 8) Commit guidance

* Commit 1: `feat(ai): add validation helpers and device maps`
* Commit 2: `feat(ai): phase7 hotspots engine (Chat Completions JSON)`
* Commit 3: `feat(ai): legacy hotspots adapter with checksum verify`
* Commit 4: `feat(api): POST /api/v1/heatmap/hotspots (parity-safe JSON)`

---

If you’d like, I can also provide **minimal skeletons** for each file (just signatures and TODO blocks) so the assistant has zero ambiguity while filling in logic.
