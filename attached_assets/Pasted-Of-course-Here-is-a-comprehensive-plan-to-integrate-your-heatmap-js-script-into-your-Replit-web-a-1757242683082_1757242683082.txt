Of course. Here is a comprehensive plan to integrate your `heatmap.js` script into your Replit web application.

This plan refactors your command-line tool into a web service with a backend API and a simple frontend interface.

-----

### **Phase 1: Project Setup and Backend Refactoring**

This phase focuses on structuring your Replit project to support a web server and preparing the heatmap logic for API integration.

#### **1. Configure Replit Environment**

  * **System Dependencies:** The `canvas` and `puppeteer` libraries require system-level packages. Create a `.replit` file in your project's root and add the following to ensure they are installed when the Repl starts:

    ```toml
    # .replit
    [nix]
    channel = "stable-23_11"

    [deployment]
    build = [
      "npm",
      "install",
      "--production"
    ]
    run = ["npm", "start"]

    [[pins]]
    package = "pkgs.chromium"

    [[pins]]
    package = "pkgs.cairo"

    [[pins]]
    package = "pkgs.pango"

    [[pins]]
    package = "pkgs.libjpeg"

    [[pins]]
    package = "pkgs.giflib"

    [[pins]]
    package = "pkgs.librsvg"
    ```

  * **Secrets:** Store your OpenAI API key securely. In your Replit, go to the **Secrets** tab (padlock icon) and create a new secret with the key `OPENAI_API_KEY` and your actual API key as the value.

  * **Package Dependencies:** Update your `package.json` to include the necessary libraries for the web app and the heatmap script.

    ```bash
    npm install express multer cors
    npm install puppeteer canvas openai pino
    ```

    Your `package.json` should also include a `start` script:

    ```json
    "scripts": {
      "start": "node server.js"
    }
    ```

#### **2. Refactor the Heatmap Script**

Instead of a single executable file, break your logic into modules. This separates the core heatmap functionality from the web server logic.

  * **Create `heatmap-generator.js`:**

      * This file should contain the `HeatmapGenerator` class and all its methods (`generateSegmentedHeatmaps`, `_renderSingleSegment`, `generateAiHeatmap`, etc.).
      * **Remove the `main()` function and all `process.argv` logic from this file.**
      * Export the class at the end of the file: `export default HeatmapGenerator;`

  * **Create `server.js` (Main Web Server):**

      * This will be your main entry point. It will set up the Express server, define API routes, and handle requests.

-----

### **Phase 2: Building the Backend API**

This phase creates the API endpoints that your frontend will call to trigger heatmap generation.

#### **1. Set up the Express Server**

In your new `server.js` file, create a basic Express application. This server will handle file uploads for the `data` mode and serve the generated images.

```javascript
// server.js
import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import HeatmapGenerator from './heatmap-generator.js'; // Assuming you renamed heatmap.js

const app = express();
const port = 3000;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Middleware ---
app.use(express.json()); // To parse JSON bodies
app.use(express.static('public')); // Serve static files from a 'public' folder

// --- File Upload Configuration (for data mode) ---
// Create 'uploads' and 'public/heatmaps' directories if they don't exist
fs.mkdirSync(path.join(__dirname, 'uploads'), { recursive: true });
fs.mkdirSync(path.join(__dirname, 'public', 'heatmaps'), { recursive: true });

const upload = multer({ dest: 'uploads/' });

// --- API Routes (to be implemented next) ---

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

*Note: You'll need to create a folder named `public` in your project.*

#### **2. Create API Endpoints**

Add these routes to `server.js` to handle requests for both AI and Data modes.

  * **AI Mode Endpoint:**
    This endpoint will receive a URL and trigger the AI heatmap generation.

    ```javascript
    // Add this inside server.js
    app.post('/api/heatmap/ai', async (req, res) => {
      const { url } = req.body;
      if (!url || !url.startsWith('http')) {
        return res.status(400).json({ error: 'A valid URL is required.' });
      }

      try {
        const generator = new HeatmapGenerator();
        const outputFileName = `heatmap-ai-${Date.now()}.png`;
        const outputPath = path.join(__dirname, 'public', 'heatmaps', outputFileName);

        // Run async without blocking the response
        generator.generateAiHeatmap(url, outputPath);

        // Immediately respond to the client
        res.status(202).json({
          message: 'AI heatmap generation started.',
          resultUrl: `/heatmaps/${outputFileName}`
        });
      } catch (error) {
        console.error('AI Heatmap Error:', error);
        res.status(500).json({ error: 'Failed to start heatmap generation.' });
      }
    });
    ```

  * **Data Mode Endpoint:**
    This endpoint will accept a file upload (`user_data.jsonl`) and a URL.

    ```javascript
    // Add this inside server.js
    app.post('/api/heatmap/data', upload.single('dataFile'), async (req, res) => {
      const { url } = req.body;
      const dataFile = req.file;

      if (!url || !dataFile) {
        return res.status(400).json({ error: 'URL and data file are required.' });
      }

      try {
        const generator = new HeatmapGenerator();
        const outputBaseName = `heatmap-data-${Date.now()}`;
        const outputBasePath = path.join(__dirname, 'public', 'heatmaps', outputBaseName);
        
        // Run async
        generator.generateSegmentedHeatmaps(url, dataFile.path, outputBasePath);

        res.status(202).json({
          message: 'Data heatmap generation started. Check back for results.',
          // Provides links to the potential output files
          results: {
            desktop: `/heatmaps/${outputBaseName}-desktop.png`,
            tablet: `/heatmaps/${outputBaseName}-tablet.png`,
            mobile: `/heatmaps/${outputBaseName}-mobile.png`
          }
        });
      } catch (error) {
        console.error('Data Heatmap Error:', error);
        res.status(500).json({ error: 'Failed to start heatmap generation.' });
      }
    });
    ```

-----

### **Phase 3: Building the Frontend Interface**

Create a simple UI to interact with your new API.

#### **1. Create `index.html`**

Place this file inside the `public` folder. This form will be the user interface.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Heatmap Generator</title>
    <style>
        /* Basic styling for clarity */
        body { font-family: sans-serif; background: #f0f2f5; margin: 2rem; }
        .container { max-width: 800px; margin: auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .form-section { border: 1px solid #ccc; padding: 1.5rem; margin-bottom: 1.5rem; border-radius: 5px; }
        h1, h2 { color: #333; }
        input[type="text"], input[type="file"] { width: 95%; padding: 10px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px; }
        button { background-color: #007bff; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        #results { margin-top: 2rem; }
        .result-image { max-width: 100%; border: 1px solid #ddd; margin-top: 1rem; }
        .loader { display: none; margin-top: 1rem; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Heatmap Generator ðŸš€</h1>

        <div class="form-section">
            <h2>ðŸ¤– AI Mode</h2>
            <form id="ai-form">
                <label for="ai-url">Website URL:</label>
                <input type="text" id="ai-url" name="url" placeholder="https://example.com" required>
                <button type="submit">Generate AI Heatmap</button>
            </form>
        </div>

        <div class="form-section">
            <h2>ðŸ“Š Data Mode</h2>
            <form id="data-form">
                <label for="data-url">Website URL:</label>
                <input type="text" id="data-url" name="url" placeholder="https://example.com" required>
                <label for="data-file">User Data File (.jsonl):</label>
                <input type="file" id="data-file" name="dataFile" accept=".jsonl" required>
                <button type="submit">Generate Data Heatmaps</button>
            </form>
        </div>

        <div id="results">
            <h2>Results</h2>
            <div id="status">Enter details above to generate a heatmap.</div>
            <div id="loader" class="loader">Generating, this may take a minute...</div>
            <div id="image-container"></div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

#### **2. Create `script.js`**

Place this file inside the `public` folder. This script will handle form submissions and display the results.

```javascript
// public/script.js
document.addEventListener('DOMContentLoaded', () => {
    const aiForm = document.getElementById('ai-form');
    const dataForm = document.getElementById('data-form');
    const statusDiv = document.getElementById('status');
    const loaderDiv = document.getElementById('loader');
    const imageContainer = document.getElementById('image-container');

    aiForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const url = document.getElementById('ai-url').value;
        imageContainer.innerHTML = '';
        statusDiv.textContent = '';
        loaderDiv.style.display = 'block';

        const response = await fetch('/api/heatmap/ai', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url })
        });

        loaderDiv.style.display = 'none';
        if (response.status === 202) {
            const data = await response.json();
            statusDiv.textContent = 'Processing... Image will appear below when ready.';
            displayImageWhenReady(data.resultUrl, "AI Heatmap");
        } else {
            statusDiv.textContent = 'Error starting generation.';
        }
    });

    dataForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(dataForm);
        imageContainer.innerHTML = '';
        statusDiv.textContent = '';
        loaderDiv.style.display = 'block';

        const response = await fetch('/api/heatmap/data', {
            method: 'POST',
            body: formData
        });

        loaderDiv.style.display = 'none';
        if (response.status === 202) {
            const data = await response.json();
            statusDiv.textContent = 'Processing... Images will appear below when ready.';
            displayImageWhenReady(data.results.desktop, "Desktop Heatmap");
            displayImageWhenReady(data.results.tablet, "Tablet Heatmap");
            displayImageWhenReady(data.results.mobile, "Mobile Heatmap");
        } else {
            statusDiv.textContent = 'Error starting generation.';
        }
    });

    function displayImageWhenReady(imageUrl, title) {
        // Simple polling mechanism to check if the image exists
        const interval = setInterval(() => {
            fetch(imageUrl, { method: 'HEAD' })
                .then(res => {
                    if (res.ok) {
                        clearInterval(interval);
                        const img = document.createElement('img');
                        img.src = imageUrl;
                        img.alt = title;
                        img.className = 'result-image';
                        
                        const titleEl = document.createElement('h3');
                        titleEl.textContent = title;

                        imageContainer.appendChild(titleEl);
                        imageContainer.appendChild(img);
                    }
                })
                .catch(err => console.log('Polling...'));
        }, 3000); // Check every 3 seconds
    }
});
```