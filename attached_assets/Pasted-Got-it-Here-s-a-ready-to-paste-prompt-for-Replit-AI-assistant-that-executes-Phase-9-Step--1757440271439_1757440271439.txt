Got it 👍
Here’s a **ready-to-paste prompt for Replit AI assistant** that executes **Phase 9 – Step 3**. This step assumes your server is rolled back to the green Phase 8 state, Step 1 + Step 2 are applied (health endpoint + QA markers + guarded static serving), and now we want to finish Phase 9 by adding the **Dev UI React page** with base64-only flows.

---

# Prompt for Replit AI Assistant

Implement **Phase 9 – Step 3** of our plan. This step adds the **Dev UI React page** and wiring, with strict base64-only heatmap support. Do NOT touch the server logic beyond routing for static serving — the backend endpoints are already working.

Follow these precise instructions:

---

### 1. Client feature flag

File: `client/src/config/featureFlags.ts`

* Add a new exported boolean:

  ```ts
  export const FEATURE_HEATMAP_DEV_UI = import.meta.env.VITE_FEATURE_HEATMAP_DEV_UI === "true";
  ```

---

### 2. Router wiring

File: `client/src/App.tsx`

* Import the flag and the new page (to be created below).
* Add a conditional `<Route path="/dev/heatmap" element={<DevHeatmap />} />` only if `FEATURE_HEATMAP_DEV_UI` is true.

---

### 3. HTTP helper

File: `client/src/utils/http.ts`

* Create a small helper for POST requests:

  ```ts
  export async function requestJson<T>(url: string, body: any): Promise<T> {
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
    if (!res.ok) {
      const text = await res.text();
      throw new Error(`HTTP ${res.status}: ${text}`);
    }
    return res.json() as Promise<T>;
  }
  ```

---

### 4. Dev UI page

File: `client/src/pages/DevHeatmap.tsx`

Implement a React page with **three collapsible panels**:

#### Panel A – AI Heatmap

* Fields: `URL` (string), `device` (dropdown: desktop/mobile).
* Submit → call `/api/v1/heatmap` with `{ url, device }`.
* Response: show the `meta` JSON and render the base64 image in an `<img>` tag.
* Errors → show clearly.
* Persist form values in `localStorage`.

#### Panel B – Data Heatmap

* Fields: `URL`, `device`, and a textarea for `dataPoints` (raw JSON).
* Submit → POST to `/api/v1/heatmap/data` with parsed JSON.
* Same output handling as AI Heatmap (meta + base64 image).
* Client-side validation: highlight textarea errors.

#### Panel C – Diagnostics

* Button: “Fetch Diagnostics” → GET `/api/v1/heatmap/diagnostics`.
* Render the raw JSON with syntax highlighting (or `<pre>`).

#### Extra behavior

* All requests cancel if a new one is fired.
* Maintain last 5 requests in an expandable log (show input + response).
* Tailwind styling with responsive grid, but keep it minimal.
* Insert static **QA marker texts** somewhere in the DOM:

  * “AI Heatmap — /api/v1/heatmap”
  * “Data Heatmap — /api/v1/heatmap/data”
  * “Diagnostics — /api/v1/heatmap/diagnostics”

---

### 5. Guard QA markers in index.html

File: `client/index.html`

* Already contains QA markers from Step 2. Leave them untouched.

---

### 6. Build + run

* Add `VITE_FEATURE_HEATMAP_DEV_UI=true` in Replit secrets.
* Run:

  ```bash
  npm run build
  ```
* Confirm `/dev/heatmap` shows the React Dev UI with all three panels.

---

### Constraints

* **Base64 only**: No `.png` URLs should ever be used or expected.
* Do not add new dependencies beyond React/Tailwind already in the project.
* Do not break existing API routes (`/api/v1/heatmap`, `/api/v1/heatmap/data`, `/api/v1/heatmap/diagnostics`).
* Do not remove or overwrite Step 1 + Step 2 changes.
* Keep the server running even if `client/dist` is missing.

---

✅ After completing this, I will run the smoke test (`smoketest.ps1`) to validate the Dev UI, AI route, Data route, and Diagnostics.

---

Would you like me to also adjust the smoke test so it explicitly checks that **no `.png` URLs** are present in responses (only base64)?
