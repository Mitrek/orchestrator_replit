Perfect—since you rolled back to the end of **Step 2**, here’s a **safe, surgical Step-3 plan** you can paste to the Replit assistant. It’s written to **avoid the two failures we hit** (duplicate declarations and wrong imports) and to keep changes minimal.

---

# Phase 5 — Step 3 (SAFE VERSION)

**Goal:** colorize the heat buffer, composite it over the screenshot, and return a final PNG (base64 or URL).
**Files to touch only:**

* `server/schemas/heatmap.ts`
* `server/services/imaging.ts`
* `server/controllers/heatmap.data.ts`
  **Do NOT edit:** `server/index.ts`, routes, or run scripts.

---

## 0) Preconditions (do not change)

* `/api/v1/heatmap/data` already works from Step 2.
* In `postHeatmapData`, we already: validate body → get screenshot → map points → accumulate → optional blur → (optional) greyscale debug.
* Keep all that intact.

---

## 1) Update the schema (add Step-3 knobs with defaults)

**File:** `server/schemas/heatmap.ts`

Extend the existing Zod schema used in Step 2 (likely `heatmapDataRequestSchema`) with **optional** fields and sensible defaults. **Do not create a new schema**.

Add:

* `alpha?: number` (default `0.60`, clamp 0..1 in controller)
* `blendMode?: "lighter" | "source-over"` (default `"lighter"`)
* `ramp?: "classic" | "soft"` (default `"classic"`)
* `clipLowPercent?: number` (default `0`)
* `clipHighPercent?: number` (default `100`)
* `returnMode?: "base64" | "url"` (default `"base64"`)

> Only change this file to add these **optionals**; do not remove/rename previous fields.

**Guardrail:** This ensures we destructure all knobs from **one** source (the parsed object) and never re-declare them later.

---

## 2) Add colorize + composite helpers (exported)

**File:** `server/services/imaging.ts`

Add **two** exported functions (do not rename existing ones; do not duplicate names):

1. `heatBufferToColorRgba(buffer: Float32Array, width: number, height: number, opts: { ramp: "classic"|"soft", clipLowPercent: number, clipHighPercent: number }): Uint8ClampedArray`

   * Compute value range, percentile-clip with `clipLowPercent/clipHighPercent`.
   * Normalize 0..1.
   * Map to colors:

     * **classic:** blue→cyan→green→yellow→red
     * **soft:** deeper blue→teal→lime→amber→orange (lower mid-tone saturation)
   * Output **RGBA** with A=255 where value>0, else A=0.

2. `compositeHeatOverScreenshot(args: { screenshotPngBase64: string; heatRgba: Uint8ClampedArray; width: number; height: number; alpha: number; blendMode: "lighter"|"source-over" }): string /* data:image/png;base64,... */`

   * Create canvas (use `@napi-rs/canvas`).
   * Draw screenshot.
   * Set `ctx.globalAlpha = clamp(alpha, 0, 1)`.
   * Set `ctx.globalCompositeOperation = blendMode`.
   * Paint the heat RGBA onto the canvas (putImageData).
   * Return a **PNG data URL**.

**Memory guardrail (must implement):**

* If `width * height > 8_000_000` pixels, downscale both screenshot and heat buffer by scale `s = sqrt(8e6/(w*h))` before compositing, then return the downscaled result. **Do not** attempt to composite at original size in Replit.

**Exports checklist:**

* Ensure these **two** functions are exported (named exports).
* Do not modify or re-export existing Step-2 functions (mapping/accumulate/blur/greyscale).

---

## 3) Upgrade the controller (single source of truth; no re-declarations)

**File:** `server/controllers/heatmap.data.ts`

Inside `postHeatmapData`:

### (a) One parse → one destructure

Replace the current parse/destructure block with a single destructure that **includes the new knobs**.
**Do not declare any of these again further down.**

```ts
const parsed = heatmapDataRequestSchema.parse(req.body);

// ✅ Single source of truth. If a name already exists from Step 2, keep it here and remove any later re-declarations.
const {
  url,
  device = "desktop",
  dataPoints,
  radiusPx = 40,
  blurPx = 24,
  intensityPerPoint = 1.0,
  debugHeat = false,

  // Step-3 knobs (new)
  alpha = 0.60,
  blendMode = "lighter",     // "lighter" | "source-over"
  ramp = "classic",          // "classic" | "soft"
  clipLowPercent = 0,
  clipHighPercent = 100,
  returnMode = "base64"      // "base64" | "url"
} = parsed;
```

**Important:**

* **Do not** write `const returnMode = req.body.returnMode ?? ...` or `const alpha = ...` etc. anywhere else.
* If you need adjusted locals, **rename** on destructure (e.g., `alpha: alphaRaw = 0.60`) and then `const alpha = clamp(alphaRaw, 0, 1)` without redeclaring the same name again.

### (b) After blur, add colorize + composite

* Call `heatBufferToColorRgba(...)` with `(buffer,width,height,{ ramp, clipLowPercent, clipHighPercent })`.
* Call `compositeHeatOverScreenshot(...)` with the screenshot base64, returned RGBA, `alpha`, `blendMode`.
* If `returnMode === "url"`, write the PNG to `public/heatmaps/heatmap-<timestamp>-<shortid>.png` and return `{ url: "/heatmaps/<file>" }` instead of `image`. (Directory and static mount already exist from earlier phases; **do not** touch `server/index.ts`.)

### (c) Keep greyscale debug OPTIONAL and downscaled

* Preserve `debug.heatLayerGray` from Step 2 (no size explosions; use the same downscale rule you already added).

### (d) Response shape (unchanged keys + updated phase)

Return:

```json
{
  "image": "data:image/png;base64,...", // or "url" when returnMode==="url"
  "meta": {
    "sourceUrl": "<url>",
    "device": "<desktop|tablet|mobile>",
    "countPoints": <int>,
    "radiusPx": <int>,
    "blurPx": <int>,
    "alpha": <number>,
    "blendMode": "<lighter|source-over>",
    "ramp": "<classic|soft>",
    "clipLowPercent": <number>,
    "clipHighPercent": <number>,
    "phase": "phase5.step3"
  },
  "debug": {
    "heatLayerGray": "data:image/png;base64,..." // only when debugHeat=true and size is safe
  }
}
```

### (e) Error handling (keep phases)

* If colorization fails: `500 { error:"colorize_failed", phase:"colorize" }`
* If composite fails: `500 { error:"composite_failed", phase:"composite" }`

**Final guardrails for the controller:**

* Search this file for `const returnMode` / `const alpha` / `const ramp` / `const blendMode`. **There must be exactly one declaration each**—in the destructure. No duplicates.
* Do not import or modify `path` here. Do not touch `server/index.ts`.

---

## 4) Run & test

* Start: `npm run dev` (don’t alter run command).
* Run the **Step-3 smoketest** I sent earlier. Expect `meta.phase = "phase5.step3"` and several PNGs saved.
* If anything fails, the error object’s `phase` tells you where (colorize/composite).

---

### Why these instructions avoid the previous crash

* We **declare request knobs once** from the parsed object and never re-declare them later (no `Duplicate identifier`).
* We **don’t touch `server/index.ts`** (so no accidental `import path from "url";` regressions).
* We include **memory guards** (downscale over 8MP), so debug and composite won’t OOM Replit.

If you want, after the assistant finishes, I can sanity-check the exact diffs you see in Replit’s change list before you run the smoketest.
