Here’s a clean prompt you can paste to the Replit assistant:

---

**Project:** Node/Express API generating webpage screenshots (in-memory, base64).

**Goal right now:** Make **Puppeteer** launch headless Chromium inside Replit so `/api/v1/heatmap/screenshot` can return a base64 PNG (no disk writes).

**Environment:**

* Replit (spock.replit.dev)
* Node 20
* Express app listens on `process.env.PORT`
* Using **serverless-friendly Chromium**:

  * `@sparticuz/chromium` (currently ^126.0.0, tried others)
  * `puppeteer-core` (tried 24.x, 21.6.0, 21.5.0, and 20.9.0)
* We are **not** using `puppeteer` (removed) to avoid the bundled Chromium

**Launcher code (current):**

```ts
// server/services/screenshot.ts
import chromium from "@sparticuz/chromium";
import puppeteer from "puppeteer-core";

export async function screenshotToBase64({ url, device = "desktop", fullPage = false }) {
  const executablePath = await chromium.executablePath();
  const browser = await puppeteer.launch({
    executablePath,
    headless: chromium.headless,
    args: chromium.args,
    defaultViewport: chromium.defaultViewport,
  });
  const page = await browser.newPage();
  await page.goto(url, { waitUntil: "networkidle2", timeout: 30_000 });
  const buf = (await page.screenshot({ type: "png", fullPage })) as Buffer;
  await browser.close();
  return `data:image/png;base64,${buf.toString("base64")}`;
}
```

**Diagnostic route & exact error:**

* `GET /api/v1/puppeteer/launch` returns:

```json
{
  "ok": false,
  "launched": false,
  "name": "Error",
  "message": "Failed to launch the browser process!\n/tmp/chromium: error while loading shared libraries: libnspr4.so: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://pptr.dev/troubleshooting\n"
}
```

**What we’ve tried:**

1. Switched from `puppeteer` to **`puppeteer-core` + `@sparticuz/chromium`** and used `chromium.executablePath()`, `chromium.args`, `chromium.headless`.
2. Tried multiple version pairs to align Chromium with the environment:

   * `puppeteer-core@24.19.0` + `@sparticuz/chromium@138`
   * `puppeteer-core@21.6.0` + `@sparticuz/chromium@126`
   * `puppeteer-core@21.5.0` + `@sparticuz/chromium@118.0.1`
   * `puppeteer-core@20.9.0` + `@sparticuz/chromium@117.0.0`
3. Confirmed server is running (other endpoints like `/api/v1/heatmap/dummy` and `/api/v1/heatmap` stub work).

**Ask:**

* What’s the **recommended way to run headless Chromium on Replit** in 2025?

  * Do we need to enable/install system libraries via **Nix**? If yes, which packages fix `libnspr4.so` (and any likely follow-ups like `libnss3.so`, etc.)?
  * Do you have an example **`replit.nix`** snippet to support Puppeteer/Chromium (NSPR/NSS/font libraries/X11 deps)?
  * Alternatively, is there a Replit-recommended **portable Chromium** or **Playwright** setup that avoids these system deps altogether?
* If sticking with Sparticuz, are there **specific version pins** (chromium + puppeteer-core) known to work on Replit’s current base image?

**Happy to try:**

* Adding Nix dependencies. Example candidates I’ve seen elsewhere:

  ```
  nspr, nss, glib, pango, cairo, at-spi2-core, atk, cups, dbus, expat,
  libX11, libXcomposite, libXdamage, libXext, libXrandr, fontconfig,
  freetype, harfbuzz, alsaLib
  ```

  (Please confirm the minimal set needed on Replit.)

**Goal of success:**

* `GET /api/v1/puppeteer/launch` → `{ ok: true, launched: true }`
* Then `/api/v1/heatmap/screenshot` returns a real base64 PNG.

Thanks!
