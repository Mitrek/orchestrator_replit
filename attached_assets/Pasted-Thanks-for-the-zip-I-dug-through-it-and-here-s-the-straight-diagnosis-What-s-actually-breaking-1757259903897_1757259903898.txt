Thanks for the zip — I dug through it and here’s the straight diagnosis.

# What’s actually breaking

1. **Replit can’t find `npm`**

* Your repo has **no `replit.nix`** file, but your `.replit` workflow tries to run `npm run dev`.
* In Replit’s Nix environment, **Node and npm are only available if you declare them in `replit.nix`**. Without that, the shell literally doesn’t have `npm`, hence:

  ```
  bash: npm: command not found
  ```

2. **Even after `npm` exists, the server will still crash immediately unless `DATABASE_URL` is set**

* `server/db.ts` throws on boot if `process.env.DATABASE_URL` is missing:

  ```ts
  const url = process.env.DATABASE_URL;
  if (!url) throw new Error("DATABASE_URL must be set");
  ```
* That means the process dies during import/initialization (before routes mount). So you need a Neon/Postgres connection string in Replit Secrets named **DATABASE\_URL**.

3. **Your run workflow doesn’t install dependencies**

* `.replit` only calls `npm run dev`. If `node_modules` isn’t present (fresh repl), nothing gets installed, so `tsx`, `vite`, etc. won’t exist.

# What to change (minimal, surgical)

## A) Add `replit.nix` (enables Node/npm)

Create a file named **`replit.nix`** at the repo root with:

```nix
{ pkgs }: {
  deps = [
    pkgs.nodejs_20
    # (Optional) If you plan to use pnpm/yarn, add one of these:
    # pkgs.nodePackages.pnpm
    # pkgs.nodePackages.yarn
  ];
}
```

> This gives you `node` and `npm` in the shell so the workflow can actually run.

## B) Make the run workflow install deps before starting

Update **`.replit`** so it installs packages first, then starts the dev server:

```toml
[workflows]
runButton = "Start Server"

[[workflows.workflow]]
name = "Start Server"
author = 640873
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
# Install dependencies (use lockfile if present), then start
args = "npm ci || npm install && npm run dev"
```

> You already have `package-lock.json`, so `npm ci` is ideal; it falls back to `npm install` if needed.

## C) Add required secrets in Replit

In **Tools → Secrets** (or “Environment Variables”):

* `DATABASE_URL` → your Neon/Postgres connection string (required)
* (Optional) `JWT_SECRET` → if you don’t set it, code will default to `"your-secret-key"`

# Extra notes I verified in your repo

* `package.json` scripts:

  * `dev` uses `tsx server/index.ts` — OK for Replit (Linux), no `cross-env` needed.
* `devDependencies` already include `tsx`, `vite`, `@replit/*` Vite plugins, etc. As long as `npm install` runs, your tooling should be there.
* The server imports DB on startup; that’s why missing `DATABASE_URL` crashes the process immediately (not just on first DB call).

# TL;DR

* The “`npm: command not found`” error is because **`replit.nix` is missing**. Add it to install Node.
* Make `.replit` **install dependencies** before running the dev server.
* Set **`DATABASE_URL`** in Replit Secrets or the app will crash during boot.

Do those three and your project should actually start up again on Replit. If you hit a follow-up error after that, paste the exact startup logs and I’ll pinpoint the next blocker fast.
