Got it üëç
Here‚Äôs a clean, copy-pasteable **prompt for the Replit AI assistant**. It captures all the lessons learned and gives step-by-step implementation instructions for **Phase 9 (Dev UI, base64-only)** without breaking your Phase-8 server.

---

# Prompt for Replit AI Assistant

I‚Äôve rolled back my project to the **end of Phase 8**. I now want to implement **Phase 9 ‚Äî Dev UI (base64-only)**.
Please follow these instructions carefully:

---

## Core rules (must not be broken)

* **Do not change the server module system.** Leave `package.json` `"type"` exactly as it is.
* **Do not create `server/package.json` or a new TS build step.** Use the same run command that worked in Phase 8.
* **Always return base64 heatmaps** (`{ base64, meta }`). Never `.png` files or URLs.
* **Guarded static serving**: if `client/dist` is missing, `/dev/heatmap` should just 404 but the server must still start and API routes must work.
* **No new UI dependencies**. Only use React + existing tooling.
* **No `@` path aliases**. Use relative imports only.
* **Don‚Äôt log full base64** (just length/prefix if needed).

---

## Step 1 ‚Äî Server changes (safe & minimal)

**Edit `server/index.ts`**:

1. Add health endpoint (if not already there):

```ts
app.get("/health", (_req, res) => res.status(200).send("ok"));
```

2. Add guarded static serving of client build:

```ts
import path from "path";
import fs from "fs";

const clientDist = path.resolve(process.cwd(), "client", "dist");

if (fs.existsSync(clientDist)) {
  app.use(express.static(clientDist));
  app.get("/dev/heatmap", (_req, res) => {
    res.sendFile(path.join(clientDist, "index.html"));
  });
} else {
  console.warn("[Phase9] client/dist not found; /dev/heatmap will 404 (safe).");
}
```

> Keep existing API routes exactly as they are, registered **before** this block.

---

## Step 2 ‚Äî Feature flag

**Create `client/src/config/featureFlags.ts`:**

```ts
export const FEATURE_HEATMAP_DEV_UI =
  (import.meta as any).env?.VITE_FEATURE_HEATMAP_DEV_UI === "true";
```

In Replit secrets:
`VITE_FEATURE_HEATMAP_DEV_UI=true`

---

## Step 3 ‚Äî Router wiring

**Edit `client/src/App.tsx`:**

* Import the flag with a relative path.
* If flag is true, register a route `/dev/heatmap` that renders `<DevHeatmap />`.

---

## Step 4 ‚Äî HTTP helper

**Create `client/src/utils/http.ts`:**

```ts
export async function requestJson<T>(opts: {
  url: string; method?: "GET"|"POST"; body?: any; signal?: AbortSignal;
}): Promise<{ status: number; durationMs: number; data: T | any }> {
  const started = performance.now();
  try {
    const resp = await fetch(opts.url, {
      method: opts.method ?? "GET",
      headers: opts.method === "POST" ? { "Content-Type": "application/json" } : undefined,
      body: opts.method === "POST" ? JSON.stringify(opts.body ?? {}) : undefined,
      signal: opts.signal,
    });
    const durationMs = Math.round(performance.now() - started);
    const text = await resp.text();
    let data: any = null;
    try { data = text ? JSON.parse(text) : null; } catch { data = text; }
    return { status: resp.status, durationMs, data };
  } catch (e: any) {
    const durationMs = Math.round(performance.now() - started);
    throw { status: 0, durationMs, error: e?.name === "AbortError" ? "ABORTED" : "NETWORK_ERROR" };
  }
}
```

---

## Step 5 ‚Äî Dev UI page

**Create `client/src/pages/DevHeatmap.tsx`:**

Two columns:

* **Left column (forms):**

  1. **AI Heatmap panel**

     * Inputs: `url`, `device` select, `persist` checkbox.
     * Button ‚ÄúGenerate AI Heatmap‚Äù.
     * Client-side validation: must start with `http://` or `https://`.
     * Save form if persist checked (`localStorage: heatmap_dev_ai_form`).
     * Abort previous request if a new one starts.
     * `POST /api/v1/heatmap`.

  2. **Data Heatmap panel**

     * Inputs: `url`, `device`, `dataPoints` (multiline JSON), `persist`.
     * Default dataPoints:

       ```json
       [
         { "x": 0.32, "y": 0.18, "type": "click" },
         { "x": 0.50, "y": 0.42, "type": "move"  },
         { "x": 0.68, "y": 0.27, "type": "move"  },
         { "x": 0.51, "y": 0.66, "type": "click" },
         { "x": 0.40, "y": 0.82, "type": "move"  }
       ]
       ```
     * Validate JSON, ensure x/y ‚àà \[0,1].
     * Persist if checked.
     * Abort previous request.
     * `POST /api/v1/heatmap/data`.

  3. **Diagnostics panel**

     * Buttons for `/health` and `/api/v1/heatmap/diagnostics`.
     * Show raw JSON in console.

* **Right column (console):**

  * Render `<img src={base64}>`.
  * Show meta (reqId, engine, viewport, duration).
  * Copy base64 button, download PNG button.
  * Raw JSON pretty-print (truncate base64 to length + prefix).
  * Last-5 request log with status/duration.

**Important:**

* No extra dependencies.
* Only React + your files.
* No `@` imports.

---

## Step 6 ‚Äî QA markers

**Edit `client/index.html`**:
Add before `</body>`:

```html
<!-- QA markers (static, for smoketests) -->
<div id="qa-markers" style="display:none">
  AI Heatmap ‚Äî /api/v1/heatmap
  Data Heatmap ‚Äî /api/v1/heatmap/data
</div>
```

---

## Step 7 ‚Äî Build and run

1. Build client:

   ```
   npm --prefix client run build
   ```

   Ensure `client/dist/` exists.

2. Start server the same way as Phase 8 (don‚Äôt change Run command).

3. Manual check:

   * `$BASE/health` ‚Üí ‚Äúok‚Äù
   * `$BASE/dev/heatmap` ‚Üí page loads (HTML contains both markers).
   * `POST /api/v1/heatmap` and `/api/v1/heatmap/data` return base64 JSON.

---

## Step 8 ‚Äî Done criteria

* `/health` returns 200 ok.
* `/dev/heatmap` serves page with QA markers.
* AI + Data forms return base64 images, shown in console.
* Input validation returns 400 on bad URLs.
* Diagnostics reachable.
* No .png URLs anywhere.
* Server never crashes even if `client/dist` missing.

---

Please implement Phase 9 exactly with this plan.
