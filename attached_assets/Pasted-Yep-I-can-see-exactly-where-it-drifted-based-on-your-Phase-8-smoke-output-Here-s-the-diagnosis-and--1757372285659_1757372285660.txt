Yep—I can see exactly where it drifted based on your Phase-8 smoke output. Here’s the diagnosis and a tight fix plan you can hand to Replit AI.

# What the smoke says (and what it means)

1. **Test 2: one “envelope/meta check” failed**

   * Your first two AI calls passed, the **data** call likely failed the envelope validator.
   * Probable causes (pick 1+):

     * `meta.phase` not `"phase7"` on `/api/v1/heatmap/data`.
     * `meta.engine` not `"data"` (or missing).
     * `base64` not prefixed with `data:image/png;base64,`.
     * `meta.viewport.width/height` missing or non-numeric.
   * Why I think it’s the data route: the AI route passed twice; the fail prints right after that and before “reqId present” for the data call.

2. **Test 4: `recentErrors` didn’t show `BAD_INPUT`**

   * You’re returning 400 correctly, but **not recording 4xx** in the diagnostics ring buffer or you’re filtering `BAD_INPUT` out.
   * Another pattern I’ve seen: recentErrors only store 5xx. Your test expects 4xx as well.

3. **Test 7: QA hook returns `{reason:"not_implemented"}` for all devices**

   * Totally fine if you haven’t built it—either:

     * Flip `$EXPECT_QA = $false` in the smoke test for now, **or**
     * Implement the basic golden/PSNR routine (quick win below).

4. **Latency is high** (p50 ≈ 6.9s, p99 ≈ 15.9s)

   * That’s OK for now (provider screenshot + OpenAI), but it’s a heads-up: consider a short screenshot cache + prompt minimization later.

---

# Hand this to Replit AI (concise “do this now” list)

## A) Fix the data route envelope (Phase-6/7 contract parity)

**Files:** `server/app-routes.ts` and the generator used by `/api/v1/heatmap/data`

1. Ensure `/api/v1/heatmap/data` returns **the exact same envelope** as AI:

   ```json
   {
     "base64": "data:image/png;base64,...",
     "meta": {
       "phase": "phase7",
       "engine": "data",
       "sourceUrl": "...",
       "device": "desktop|tablet|mobile",
       "viewport": {"width":123,"height":456},
       "durationMs": 1234,
       "timestamp": "ISO-8601",
       "reqId": "..."
     }
   }
   ```
2. Double-check:

   * `base64` string starts with `data:image/png;base64,`
   * `viewport.width` & `viewport.height` are numbers
   * `meta.engine === "data"`
   * `meta.phase === "phase7"`
   * `meta.reqId` echoed (the smoke checks this later too)

**Acceptance:** Re-run the Phase-8 smoke. “FAIL envelope/meta check” disappears.

---

## B) Record 4xx errors in `recentErrors`

**Files:** wherever you push into diagnostics’ ring buffer (e.g., `server/diagnostics.ts` or `server/metrics.ts` error store) and the 4xx handler in `server/app-routes.ts`.

1. When you return **400 BAD\_INPUT**, also append a compact entry into `recentErrors`:

   ```json
   {
     "ts": "ISO-8601",
     "route": "/api/v1/heatmap",
     "errType": "BAD_INPUT",
     "errCode": "400",
     "message": "URL is required",
     "reqId": "..."
   }
   ```
2. Keep a **small ring buffer** (e.g., last 50 entries) including **both 4xx and 5xx**.
3. Do not include secrets or big payloads.

**Acceptance:** Re-run Test 4 → still 400, and diagnostics now shows a `recentErrors` entry with `errType:"BAD_INPUT"`.

---

## C) Either disable QA in smoke for now or implement the minimal QA

**Option 1 (quick):** set `$EXPECT_QA = $false` in the script until QA is built.

**Option 2 (better, still small): Implement the golden test**
**Files:** `server/qa.ts` (new), `server/app-routes.ts` (read `qa=1`), `public/qa/` (goldens)

1. **Golden setup**

   * Pick one fixed URL and **disable AI** for QA (use the data renderer with a fixed synthetic point set).
   * For each device (`desktop/tablet/mobile`), render once and store golden PNG in `public/qa/golden-<device>.png`. Check into repo.

2. **Deterministic render**

   * Use fixed viewport per device, fixed point set, fixed alpha/ramp. No randomness.

3. **PSNR computation**

   * Load both current render and golden, compare same dimensions; compute MSE and PSNR:

     * `MSE = avg((p - g)^2 over all channels)`
     * `PSNR = 10 * log10( (255^2) / MSE )` (if MSE=0, set PSNR to a large number like 100)
   * Threshold: **PSNR ≥ 35 dB => pass**.

4. **Diagnostics hook**

   * If `?qa=1`, run the three devices and return:

     ```json
     "qa": [
       {"device":"desktop","psnr":42.1,"pass":true},
       {"device":"tablet","psnr":41.9,"pass":true},
       {"device":"mobile","psnr":39.3,"pass":true}
     ]
     ```
   * If goldens missing, respond with `pass:false, reason:"missing_golden"` (no 500s).

**Acceptance:** Test 7 passes (or set `$EXPECT_QA=$false` until it does).

---

## D) (Optional) Low-effort latency wins

* **Screenshot cache**: cache provider screenshot for the same `{url,device}` for \~2–5 minutes.
* **Prompt diet**: keep OpenAI prompt as short as possible; clamp hotspots to ≤ 6–8.
* **Timeouts**: hard cap both provider and AI calls; fail fast to fallback hotspots if needed.

---

# What to re-run after these fixes

* Phase-8 smoke again (no edits needed if you implement the QA; otherwise set `$EXPECT_QA=$false`).
* You should then see:

  * ✅ No “envelope/meta check” fail
  * ✅ `recentErrors` includes `BAD_INPUT`
  * ✅ QA either passing or cleanly skipped

If you want, I can also generate a **tiny patch checklist** per file (line-level) to make sure your Replit assistant doesn’t wander. But you shouldn’t need to send the full project—the signals from your smoke are precise enough to guide the changes above. If anything still fails after this pass, share the diagnostics JSON for the failing parts and I’ll zero in further.
